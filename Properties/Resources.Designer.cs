//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace S6Patcher.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("S6Patcher.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Changes:.
        /// </summary>
        internal static string btnEnglishTitle {
            get {
                return ResourceManager.GetString("btnEnglishTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Änderungen:.
        /// </summary>
        internal static string btnGermanTitle {
            get {
                return ResourceManager.GetString("btnGermanTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to - High resolution textures for Buildings/Entities/Ground.
        ///- Unlimited scaling of the entity size.
        ///- Free placing and moving of entities, walls and wall gates.
        ///- Higher entity limit.
        ///- Move more entities at the same time (100 -&gt; 1055).
        ///- Black map border area can be used and is not deleted at map save.
        ///- Activates the Development-Mode without Registry-Key.
        ///- Replaces &quot;Validate Map&quot; with Game Start (Lost Feature).
        ///- Enables walls and wall gates from all climate zones in all climate zones.
        ///- Can place [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string btnPatch_EnglishText {
            get {
                return ResourceManager.GetString("btnPatch_EnglishText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to - Hohe Texturen für Gebäude/Entitäten/Boden.
        ///- Unbegrenztes Skalieren der Größe von Entitäten.
        ///- Freies Platzieren und Ineinander-Verschieben von Entitäten, Mauern und Mauertoren.
        ///- Erhöhen des Entitätenlimits.
        ///- Mehr Entitäten gleichzeitig Bewegen (100 -&gt; 1055).
        ///- Kartenrand wird beim Speichervorgang nicht gelöscht.
        ///- Dauerhaftes Aktivieren des Development-Modes ohne Registry-Key.
        ///- Ersetzt &quot;Validate Map&quot; mit Spielstart (Lost Feature).
        ///- Mauern und Mauertore aus allen Klimazonen können gesetzt werd [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string btnPatch_GermanText {
            get {
                return ResourceManager.GetString("btnPatch_GermanText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to - Activates the Development - Mode (Necessary for the LuaDebugger to work).
        ///- Can disable the autosave or set an custom interval.
        ///- Can set the maximum zoom level in the game.
        ///- Can set the Large Address Aware Flag for more usable memory.
        ///- Fixes the &quot;Meldungsstau&quot; - Bug in the game.
        ///-&gt; Does NOT work with the Steam - HE!.
        /// </summary>
        internal static string btnPatchHE_EnglishText {
            get {
                return ResourceManager.GetString("btnPatchHE_EnglishText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to - Aktiviert den Development - Mode (Notwendig für die Funktion des LuaDebuggers).
        ///- Kann den Autosave deaktivieren oder den Intervall setzen.
        ///- Kann den maximalen Zoomlevel setzen.
        ///- Kann das Large Address Aware Flag aktivieren, um mehr adressierbaren Speicher zu haben.
        ///- Fixt den Meldungsstau - Bug im Spiel.
        ///-&gt; Funktioniert NICHT in der Steam - HE!.
        /// </summary>
        internal static string btnPatchHE_GermanText {
            get {
                return ResourceManager.GetString("btnPatchHE_GermanText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to - Reactivates the texture-slider, so high textures can be choosen in the menu.
        ///- Enables high-quality ground textures.
        ///- Can set the maximum zoom level in the game.
        ///- Activates the Development - Mode without Registry - Key.
        ///- Can set the Large Address Aware Flag for more usable memory..
        /// </summary>
        internal static string btnPatchOV_EnglishText {
            get {
                return ResourceManager.GetString("btnPatchOV_EnglishText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to - Reaktiviert den Textur-Slider, um hohe Texturen auswählen zu können.
        ///- Setzt die Qualität von Bodentexturen auf den höchsten Wert.
        ///- Kann den maximalen Zoomlevel setzen.
        ///- Kann das Large Address Aware Flag aktivieren, um mehr adressierbaren Speicher zu haben.
        ///- Aktiviert den Development - Mode ohne Registry - Key..
        /// </summary>
        internal static string btnPatchOV_GermanText {
            get {
                return ResourceManager.GetString("btnPatchOV_GermanText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] LocalMainMapScript {
            get {
                object obj = ResourceManager.GetObject("LocalMainMapScript", resourceCulture);
                return ((byte[])(obj));
            }
        }
    }
}
